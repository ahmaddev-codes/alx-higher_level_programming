7-base_geometry.py
==================

Class
=====
BaseGeometry

Public instance method: area(self)
- raises an Exception with the message area() is not implemented

Public instance method: integer_validator(self, name, value)
- validates value:
	is always a string
- if value is not an integer:
	raise a TypeError exception, with the message <name> must be an integer
- if value is less or equal to 0:
	raise a ValueError exception with the message <name> must be greater than 0

Import class
============
Test case #01:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create an instance
==================
Test case #02:
>>> bg = BaseGeometry()

Access class methods
====================
Test case #03:
>>> bg.integer_validator("my_int", 12)

Test case #04:
>>> bg.integer_validator("width", 89)

Use a try and exception block
=============================
Test case #04:
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[TypeError] name must be an integer

Test case #05:
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] age must be greater than 0

Test case #06:
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[ValueError] distance must be greater than 0
